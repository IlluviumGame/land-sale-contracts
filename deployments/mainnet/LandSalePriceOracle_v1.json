{
  "address": "0x4660E8f7f44a2d57900c7dEe4345EB1D738311fF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldVal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "OldAnswerThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_PRICE_ORACLE_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_UPGRADE_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethOut",
          "type": "uint256"
        }
      ],
      "name": "ethToIlv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ilvIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "desired",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "now256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldAnswerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "postConstruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oldAnswerThreshold",
          "type": "uint256"
        }
      ],
      "name": "setOldAnswerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf155bc281f105c3b2b267efa2ecfac265b8e6412b7ff6b13b305b76ac81e9f88",
  "receipt": {
    "to": null,
    "from": "0x9989818AE063f715a857925E419bA4B65b793d99",
    "contractAddress": "0x4660E8f7f44a2d57900c7dEe4345EB1D738311fF",
    "transactionIndex": 55,
    "gasUsed": "1273841",
    "logsBloom": "0x
    "blockHash": "0x6a5edd1b19d77960b12540fc200c60b2505aaed85142dba999985147f0e454c5",
    "transactionHash": "0xf155bc281f105c3b2b267efa2ecfac265b8e6412b7ff6b13b305b76ac81e9f88",
    "logs": [],
    "blockNumber": 14846661,
    "cumulativeGasUsed": "5705841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a10a8b7c984c7cfc164097f35824b88a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"OldAnswerThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_PRICE_ORACLE_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_UPGRADE_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"}],\"name\":\"ethToIlv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ilvIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldAnswerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"postConstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oldAnswerThreshold\",\"type\":\"uint256\"}],\"name\":\"setOldAnswerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"events\":{\"OldAnswerThresholdUpdated(address,uint256,uint256)\":{\"details\":\"Fired in setOldAnswerThreshold()\",\"params\":{\"_by\":\"an address which executed update\",\"_newVal\":\"new oldAnswerThreshold value\",\"_oldVal\":\"old oldAnswerThreshold value\"}}},\"kind\":\"dev\",\"methods\":{\"ethToIlv(uint256)\":{\"details\":\"Implementation must guarantee not to return zero, absurdly small      or big values, it must guarantee the price is up to date with some      reasonable update interval threshold\",\"params\":{\"ethOut\":\"amount of ETH sale contract is expecting to get\"},\"returns\":{\"ilvIn\":\"amount of sILV sale contract should accept instead\"}},\"evaluateBy(address,uint256,uint256)\":{\"details\":\"Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011\",\"params\":{\"desired\":\"desired set of permissions operator would like to set\",\"operator\":\"address of the contract operator which is about to set the permissions\",\"target\":\"input set of permissions to operator is going to modify\"},\"returns\":{\"_0\":\"resulting set of permissions given operator will set\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"getImplementation()\":{\"returns\":{\"_0\":\"the current implementation address\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isSenderInRole(uint256)\":{\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"now256()\":{\"details\":\"Testing time-dependent functionality may be difficult;      we override time in the helper test smart contract (mock)\",\"returns\":{\"_0\":\"`block.timestamp` in mainnet, custom values in testnets (if overridden)\"}},\"postConstruct(address)\":{\"details\":\"\\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\",\"params\":{\"_aggregator\":\"Chainlink ILV/ETH price feed aggregator address\"}},\"setOldAnswerThreshold(uint256)\":{\"params\":{\"_oldAnswerThreshold\":\"`oldAnswerThreshold` value to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for or zero      to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"ROLE_PRICE_ORACLE_MANAGER\":{\"details\":\"Role ROLE_PRICE_ORACLE_MANAGER allows updating the `oldAnswerThreshold` value      (executing `setOldAnswerThreshold` function)\"}},\"title\":\"Chainlink Price Feed Aggregator based Land Sale Price Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_PRICE_ORACLE_MANAGER()\":{\"notice\":\"Price Oracle manager is responsible for updating `oldAnswerThreshold` value,      and other price oracle configuration values in the future\"},\"ROLE_UPGRADE_MANAGER()\":{\"notice\":\"Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\"},\"aggregator()\":{\"notice\":\"Chainlink ILV/ETH price feed aggregator maintains ILV/ETH price feed\"},\"ethToIlv(uint256)\":{\"notice\":\"Powers the ETH/ILV Land token price conversion, used when      selling the land for sILV to determine how much sILV to accept      instead of the nominated ETH priceNote that sILV price is considered to be equal to ILV price\"},\"evaluateBy(address,uint256,uint256)\":{\"notice\":\"Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"getImplementation()\":{\"notice\":\"Returns an address of the implementation smart contract,      see ERC1967Upgrade._getImplementation()\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"oldAnswerThreshold()\":{\"notice\":\"When communicating with Chainlink ILV/ETH price feed, we verify how old      the IV/ETH price is, and if it is older than `oldAnswerThreshold`, the answer      is treated as old and is not used: `ethToIlv` conversion function throws in this case\"},\"setOldAnswerThreshold(uint256)\":{\"notice\":\"Restricted access function to update `oldAnswerThreshold` value, used       in `ethToIlv` conversion function to determine if Chainlink ILV/ETH price feed       returns the value fresh enough to be usedNote: `ethToIlv` conversion function throws if Chainlink ILV/ETH price feed      answer is older then `oldAnswerThreshold` valueChainlink is expected to update ILV/ETH price at least one per day (24 hours)      therefore `oldAnswerThreshold` should be kept bigger than 24 hours\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"userRoles(address)\":{\"notice\":\"Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"}},\"notice\":\"LandSalePriceOracle implementation based on ILV/ETH Chainlink price feeds,      see https://docs.chain.link/docs/ethereum-addresses/      see https://docs.chain.link/docs/using-chainlink-reference-contracts/\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/LandSalePriceOracleV1.sol\":\"LandSalePriceOracleV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/PriceOracleSpec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Pair Price Oracle, a.k.a. Pair Oracle\\n *\\n * @notice Generic interface used to consult on the Uniswap-like token pairs conversion prices;\\n *      one pair oracle is used to consult on the exchange rate within a single token pair\\n *\\n * @notice See also: https://docs.uniswap.org/protocol/V2/guides/smart-contract-integration/building-an-oracle\\n *\\n * @author Basil Gorin\\n */\\ninterface PairOracle {\\n\\t/**\\n\\t * @notice Updates the oracle with the price values if required, for example\\n\\t *      the cumulative price at the start and end of a period, etc.\\n\\t *\\n\\t * @dev This function is part of the oracle maintenance flow\\n\\t */\\n\\tfunction update() external;\\n\\n\\t/**\\n\\t * @notice For a pair of tokens A/B (sell/buy), consults on the amount of token B to be\\n\\t *      bought if the specified amount of token A to be sold\\n\\t *\\n\\t * @dev This function is part of the oracle usage flow\\n\\t *\\n\\t * @param token token A (token to sell) address\\n\\t * @param amountIn amount of token A to sell\\n\\t * @return amountOut amount of token B to be bought\\n\\t */\\n\\tfunction consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\\n}\\n\\n/**\\n * @title Price Oracle Registry\\n *\\n * @notice To make pair oracles more convenient to use, a more generic Oracle Registry\\n *        interface is introduced: it stores the addresses of pair price oracles and allows\\n *        searching/querying for them\\n *\\n * @author Basil Gorin\\n */\\ninterface PriceOracleRegistry {\\n\\t/**\\n\\t * @notice Searches for the Pair Price Oracle for A/B (sell/buy) token pair\\n\\t *\\n\\t * @param tokenA token A (token to sell) address\\n\\t * @param tokenB token B (token to buy) address\\n\\t * @return pairOracle pair price oracle address for A/B token pair\\n\\t */\\n\\tfunction getPriceOracle(address tokenA, address tokenB) external view returns (address pairOracle);\\n}\\n\\n/**\\n * @title Land Sale Price Oracle\\n *\\n * @notice Supports the Land Sale with the ETH/ILV conversion required,\\n *       marker interface is required to support ERC165 lookups\\n *\\n * @author Basil Gorin\\n */\\ninterface LandSalePriceOracle {\\n\\t/**\\n\\t * @notice Powers the ETH/ILV Land token price conversion, used when\\n\\t *      selling the land for sILV to determine how much sILV to accept\\n\\t *      instead of the nominated ETH price\\n\\t *\\n\\t * @notice Note that sILV price is considered to be equal to ILV price\\n\\t *\\n\\t * @dev Implementation must guarantee not to return zero, absurdly small\\n\\t *      or big values, it must guarantee the price is up to date with some\\n\\t *      reasonable update interval threshold\\n\\t *\\n\\t * @param ethOut amount of ETH sale contract is expecting to get\\n\\t * @return ilvIn amount of sILV sale contract should accept instead\\n\\t */\\n\\tfunction ethToIlv(uint256 ethOut) external returns (uint256 ilvIn);\\n}\\n\",\"keccak256\":\"0x95b9c480bb259a30f5c95cceb062d27a359956a5b5f1ac3a9108123867b4eb6b\",\"license\":\"MIT\"},\"contracts/protocol/LandSalePriceOracleV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC165Spec.sol\\\";\\nimport \\\"../interfaces/PriceOracleSpec.sol\\\";\\nimport \\\"../utils/UpgradeableAccessControl.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title Chainlink Price Feed Aggregator based Land Sale Price Oracle\\n *\\n * @notice LandSalePriceOracle implementation based on ILV/ETH Chainlink price feeds,\\n *      see https://docs.chain.link/docs/ethereum-addresses/\\n *      see https://docs.chain.link/docs/using-chainlink-reference-contracts/\\n *\\n * @author Basil Gorin\\n */\\ncontract LandSalePriceOracleV1 is ERC165, LandSalePriceOracle, UpgradeableAccessControl {\\n\\t/**\\n\\t * @notice Chainlink ILV/ETH price feed aggregator maintains ILV/ETH price feed\\n\\t */\\n\\tAggregatorV3Interface public aggregator;\\n\\n\\t/**\\n\\t * @notice When communicating with Chainlink ILV/ETH price feed, we verify how old\\n\\t *      the IV/ETH price is, and if it is older than `oldAnswerThreshold`, the answer\\n\\t *      is treated as old and is not used: `ethToIlv` conversion function throws in this case\\n\\t */\\n\\tuint256 public oldAnswerThreshold;\\n\\n\\t/**\\n\\t * @notice Price Oracle manager is responsible for updating `oldAnswerThreshold` value,\\n\\t *      and other price oracle configuration values in the future\\n\\t *\\n\\t * @dev Role ROLE_PRICE_ORACLE_MANAGER allows updating the `oldAnswerThreshold` value\\n\\t *      (executing `setOldAnswerThreshold` function)\\n\\t */\\n\\tuint32 public constant ROLE_PRICE_ORACLE_MANAGER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @dev Fired in setOldAnswerThreshold()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _oldVal old oldAnswerThreshold value\\n\\t * @param _newVal new oldAnswerThreshold value\\n\\t */\\n\\tevent OldAnswerThresholdUpdated(address indexed _by, uint256 _oldVal, uint256 _newVal);\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * @param _aggregator Chainlink ILV/ETH price feed aggregator address\\n\\t */\\n\\tfunction postConstruct(address _aggregator) public virtual initializer {\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(_aggregator != address(0), \\\"aggregator address is not set\\\");\\n\\n\\t\\t// assign the addresses\\n\\t\\taggregator = AggregatorV3Interface(_aggregator);\\n\\n\\t\\t// set the default value for the threshold\\n\\t\\toldAnswerThreshold = 30 hours;\\n\\n\\t\\t// verify the inputs are valid smart contracts of the expected interfaces\\n\\t\\t// since Chainlink AggregatorV3Interface doesn't support ERC165, verify\\n\\t\\t// by executing the functions we're going to use anyway\\n\\t\\t// get the data\\n\\t\\tuint8 decimals = aggregator.decimals();\\n\\t\\t(\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t) = aggregator.latestRoundData();\\n\\t\\t// verify the response\\n\\t\\trequire(\\n\\t\\t\\tdecimals > 0 && roundId > 0 && answer > 0 && startedAt > 0 && updatedAt > 0 && answeredInRound > 0,\\n\\t\\t\\t\\\"unexpected aggregator response\\\"\\n\\t\\t);\\n\\n\\t\\t// execute all parent initializers in cascade\\n\\t\\tUpgradeableAccessControl._postConstruct(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Restricted access function to update `oldAnswerThreshold` value, used\\n\\t *       in `ethToIlv` conversion function to determine if Chainlink ILV/ETH price feed\\n\\t *       returns the value fresh enough to be used\\n\\t *\\n\\t * @notice Note: `ethToIlv` conversion function throws if Chainlink ILV/ETH price feed\\n\\t *      answer is older then `oldAnswerThreshold` value\\n\\t *\\n\\t * @notice Chainlink is expected to update ILV/ETH price at least one per day (24 hours)\\n\\t *      therefore `oldAnswerThreshold` should be kept bigger than 24 hours\\n\\t *\\n\\t * @param _oldAnswerThreshold `oldAnswerThreshold` value to set\\n\\t */\\n\\tfunction setOldAnswerThreshold(uint256 _oldAnswerThreshold) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_PRICE_ORACLE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// check that the value supplied resides in a reasonable bounds\\n\\t\\trequire(_oldAnswerThreshold > 1 hours, \\\"threshold too low\\\");\\n\\t\\trequire(_oldAnswerThreshold < 7 days, \\\"threshold too high\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit OldAnswerThresholdUpdated(msg.sender, oldAnswerThreshold, _oldAnswerThreshold);\\n\\n\\t\\t// update the `oldAnswerThreshold` value\\n\\t\\toldAnswerThreshold = _oldAnswerThreshold;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n\\t\\t// determine and return the interface support\\n\\t\\treturn interfaceID == type(LandSalePriceOracle).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc LandSalePriceOracle\\n\\t */\\n\\tfunction ethToIlv(uint256 ethOut) public view virtual override returns (uint256 ilvIn) {\\n\\t\\t// get the latest round data from Chainlink price feed aggregator\\n\\t\\t// see https://docs.chain.link/docs/price-feeds-api-reference/#latestrounddata\\n\\t\\t(\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t) = aggregator.latestRoundData();\\n\\n\\t\\t// verify if the data obtained from Chainlink looks fresh, updated recently\\n\\t\\t// TODO: review and check with Chainlink this is a correct way of ensuring data freshness\\n\\t\\trequire(roundId == answeredInRound && startedAt <= updatedAt && updatedAt <= now256(), \\\"invalid answer\\\");\\n\\t\\trequire(updatedAt > now256() - oldAnswerThreshold, \\\"answer is too old\\\");\\n\\n\\t\\t// calculate according to `ethOut * ilvIn / ethOut` formula and return\\n\\t\\treturn ethOut * 10 ** aggregator.decimals() / uint256(answer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Testing time-dependent functionality may be difficult;\\n\\t *      we override time in the helper test smart contract (mock)\\n\\t *\\n\\t * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n\\t */\\n\\tfunction now256() public view virtual returns (uint256) {\\n\\t\\t// return current block timestamp\\n\\t\\treturn block.timestamp;\\n\\t}\\n}\\n\",\"keccak256\":\"0x6ba81f1e1c30f59fb6ee40ce6c16edeb300770603fcbb5f6c8180815e9f0fefa\",\"license\":\"MIT\"},\"contracts/utils/UpgradeableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title Upgradeable Access Control List // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an upgradeable version of the ACL, based on Zeppelin implementation for ERC1967,\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *\\n * @author Basil Gorin\\n */\\nabstract contract UpgradeableAccessControl is UUPSUpgradeable {\\n\\t/**\\n\\t * @notice Privileged addresses with defined roles/permissions\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t */\\n\\tmapping(address => uint256) public userRoles;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @notice Upgrade manager is responsible for smart contract upgrades,\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n\\t *\\n\\t * @dev Role ROLE_UPGRADE_MANAGER allows passing the _authorizeUpgrade() check\\n\\t * @dev Role ROLE_UPGRADE_MANAGER has single bit at position 254 enabled\\n\\t */\\n\\tuint256 public constant ROLE_UPGRADE_MANAGER = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param _by operator which called the function\\n\\t * @param _to address which was granted/revoked permissions\\n\\t * @param _requested permissions requested\\n\\t * @param _actual permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n\\t/**\\n\\t * @dev UUPS initializer, sets the contract owner to have full privileges\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(address _owner) internal virtual initializer {\\n\\t\\t// grant owner full privileges\\n\\t\\tuserRoles[_owner] = FULL_PRIVILEGES_MASK;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, _owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an address of the implementation smart contract,\\n\\t *      see ERC1967Upgrade._getImplementation()\\n\\t *\\n\\t * @return the current implementation address\\n\\t */\\n\\tfunction getImplementation() public view virtual returns (address) {\\n\\t\\t// delegate to `ERC1967Upgrade._getImplementation()`\\n\\t\\treturn _getImplementation();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\n\\t\\treturn userRoles[address(this)];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for or zero\\n\\t *      to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = userRoles[operator];\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(userRoles[operator], required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc UUPSUpgradeable\\n\\t */\\n\\tfunction _authorizeUpgrade(address) internal virtual override {\\n\\t\\t// caller must have a permission to upgrade the contract\\n\\t\\trequire(isSenderInRole(ROLE_UPGRADE_MANAGER), \\\"access denied\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x79dc112e2eef5e034ef3607137c5981a0c88021318d0a906b2d35343e2845644\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516116196100456000396000818161078f015281816107cf01528181610858015261089801526116196000f3fe60806040526004361061012a5760003560e01c806374d5e100116100ab578063ae682e2e1161006f578063ae682e2e14610335578063c688d6931461034d578063d5bb7f671461036d578063f2f4ba1f1461038d578063f822d5aa146103b9578063fcc2c078146103d957600080fd5b806374d5e1001461029b5780639b50aa4e146102c8578063aaf10f42146102e8578063ae5b102e146102fd578063ae60bda41461031d57600080fd5b806333482021116100f257806333482021146102155780633659cfe6146102355780634ce0f9a6146102555780634f1ef28614610268578063725f36261461027b57600080fd5b806301ffc9a71461012f57806312e5acaa14610175578063245a7bfc146101995780632b521416146101d157806331576ad5146101f3575b600080fd5b34801561013b57600080fd5b5061016061014a366004611096565b6001600160e01b031916634da8552760e11b1490565b60405190151581526020015b60405180910390f35b34801561018157600080fd5b5061018b60985481565b60405190815260200161016c565b3480156101a557600080fd5b506097546101b9906001600160a01b031681565b6040516001600160a01b03909116815260200161016c565b3480156101dd57600080fd5b503060009081526065602052604090205461018b565b3480156101ff57600080fd5b5061021361020e3660046110dc565b6103f9565b005b34801561022157600080fd5b506102136102303660046110f7565b61068d565b34801561024157600080fd5b506102136102503660046110dc565b610784565b34801561026157600080fd5b504261018b565b610213610276366004611126565b61084d565b34801561028757600080fd5b506101606102963660046110f7565b610903565b3480156102a757600080fd5b5061018b6102b63660046110dc565b60656020526000908152604090205481565b3480156102d457600080fd5b5061018b6102e33660046110f7565b61091e565b3480156102f457600080fd5b506101b9610af8565b34801561030957600080fd5b506102136103183660046111e8565b610b07565b34801561032957600080fd5b5061018b600160fe1b81565b34801561034157600080fd5b5061018b600160ff1b81565b34801561035957600080fd5b506101606103683660046111e8565b610bba565b34801561037957600080fd5b506102136103883660046110f7565b610bdf565b34801561039957600080fd5b506103a46201000081565b60405163ffffffff909116815260200161016c565b3480156103c557600080fd5b5061018b6103d4366004611212565b610be9565b3480156103e557600080fd5b506101606103f43660046110f7565b610c14565b600054610100900460ff166104145760005460ff1615610418565b303b155b61043d5760405162461bcd60e51b815260040161043490611245565b60405180910390fd5b600054610100900460ff1615801561045f576000805461ffff19166101011790555b6001600160a01b0382166104b55760405162461bcd60e51b815260206004820152601d60248201527f61676772656761746f722061646472657373206973206e6f74207365740000006044820152606401610434565b609780546001600160a01b0319166001600160a01b0384169081179091556201a5e06098556040805163313ce56760e01b815290516000929163313ce5679160048083019260209291908290030181865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c9190611293565b90506000806000806000609760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd91906112cd565b9450945094509450945060008660ff161180156105e357506000856001600160501b0316115b80156105ef5750600084135b80156105fb5750600083115b80156106075750600082115b801561061c57506000816001600160501b0316115b6106685760405162461bcd60e51b815260206004820152601e60248201527f756e65787065637465642061676772656761746f7220726573706f6e736500006044820152606401610434565b61067133610c20565b5050505050508015610689576000805461ff00191690555b5050565b61069962010000610c14565b6106b55760405162461bcd60e51b81526004016104349061131d565b610e1081116106fa5760405162461bcd60e51b81526020600482015260116024820152707468726573686f6c6420746f6f206c6f7760781b6044820152606401610434565b62093a8081106107415760405162461bcd60e51b81526020600482015260126024820152710e8d0e4cae6d0ded8c840e8dede40d0d2ced60731b6044820152606401610434565b609854604080519182526020820183905233917fdb2071e8c3304bdd7d56b3e58c5096520380c1ece076cc01f07eea15d4febc83910160405180910390a2609855565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107cd5760405162461bcd60e51b815260040161043490611344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107ff610ceb565b6001600160a01b0316146108255760405162461bcd60e51b815260040161043490611390565b61082e81610d19565b6040805160008082526020820190925261084a91839190610d42565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108965760405162461bcd60e51b815260040161043490611344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108c8610ceb565b6001600160a01b0316146108ee5760405162461bcd60e51b815260040161043490611390565b6108f782610d19565b61068982826001610d42565b30600090815260656020526040812054821682145b92915050565b600080600080600080609760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e91906112cd565b94509450945094509450806001600160501b0316856001600160501b03161480156109c95750818311155b80156109d55750428211155b610a125760405162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b21030b739bbb2b960911b6044820152606401610434565b609854610a1f90426113f2565b8211610a615760405162461bcd60e51b8152602060048201526011602482015270185b9cddd95c881a5cc81d1bdbc81bdb19607a1b6044820152606401610434565b6097546040805163313ce56760e01b8152905186926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190611293565b610ad990600a6114ed565b610ae390896114fc565b610aed919061151b565b979650505050505050565b6000610b02610ceb565b905090565b610b14600160ff1b610c14565b610b305760405162461bcd60e51b81526004016104349061131d565b6001600160a01b038216600090815260656020526040902054610b5590339083610be9565b6001600160a01b0383166000818152606560205260409081902083905551909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f91610bae91869190918252602082015260400190565b60405180910390a35050565b6001600160a01b038216600090815260656020526040812054821682145b9392505050565b61084a3082610b07565b6001600160a01b03929092166000908152606560205260409020546000198084188216189216171690565b60006109183383610bba565b600054610100900460ff16610c3b5760005460ff1615610c3f565b303b155b610c5b5760405162461bcd60e51b815260040161043490611245565b600054610100900460ff16158015610c7d576000805461ffff19166101011790555b6001600160a01b0382166000818152606560209081526040918290206000199081905582518181529182015233917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a38015610689576000805461ff00191690555050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b610d26600160fe1b610c14565b61084a5760405162461bcd60e51b81526004016104349061131d565b6000610d4c610ceb565b9050610d5784610e8d565b600083511180610d645750815b15610d7557610d738484610f32565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610e8657805460ff191660011781556040516001600160a01b0383166024820152610df490869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610f32565b50805460ff19168155610e05610ceb565b6001600160a01b0316826001600160a01b031614610e7d5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610434565b610e868561101d565b5050505050565b803b610ef15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610434565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b610f915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610434565b600080846001600160a01b031684604051610fac919061156d565b600060405180830381855af49150503d8060008114610fe7576040519150601f19603f3d011682016040523d82523d6000602084013e610fec565b606091505b509150915061101482826040518060600160405280602781526020016115bd6027913961105d565b95945050505050565b61102681610e8d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060831561106c575081610bd8565b82511561107c5782518084602001fd5b8160405162461bcd60e51b81526004016104349190611589565b6000602082840312156110a857600080fd5b81356001600160e01b031981168114610bd857600080fd5b80356001600160a01b03811681146110d757600080fd5b919050565b6000602082840312156110ee57600080fd5b610bd8826110c0565b60006020828403121561110957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561113957600080fd5b611142836110c0565b9150602083013567ffffffffffffffff8082111561115f57600080fd5b818501915085601f83011261117357600080fd5b81358181111561118557611185611110565b604051601f8201601f19908116603f011681019083821181831017156111ad576111ad611110565b816040528281528860208487010111156111c657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156111fb57600080fd5b611204836110c0565b946020939093013593505050565b60008060006060848603121561122757600080fd5b611230846110c0565b95602085013595506040909401359392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156112a557600080fd5b815160ff81168114610bd857600080fd5b80516001600160501b03811681146110d757600080fd5b600080600080600060a086880312156112e557600080fd5b6112ee866112b6565b9450602086015193506040860151925060608601519150611311608087016112b6565b90509295509295909350565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611404576114046113dc565b500390565b600181815b8085111561144457816000190482111561142a5761142a6113dc565b8085161561143757918102915b93841c939080029061140e565b509250929050565b60008261145b57506001610918565b8161146857506000610918565b816001811461147e5760028114611488576114a4565b6001915050610918565b60ff841115611499576114996113dc565b50506001821b610918565b5060208310610133831016604e8410600b84101617156114c7575081810a610918565b6114d18383611409565b80600019048211156114e5576114e56113dc565b029392505050565b6000610bd860ff84168361144c565b6000816000190483118215151615611516576115166113dc565b500290565b60008261153857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611558578181015183820152602001611540565b83811115611567576000848401525b50505050565b6000825161157f81846020870161153d565b9190910192915050565b60208152600082518060208401526115a881604085016020870161153d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200ff148c3fe00800044693bb4936e8103e4209869fade6aa212b35815c0e5178864736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c806374d5e100116100ab578063ae682e2e1161006f578063ae682e2e14610335578063c688d6931461034d578063d5bb7f671461036d578063f2f4ba1f1461038d578063f822d5aa146103b9578063fcc2c078146103d957600080fd5b806374d5e1001461029b5780639b50aa4e146102c8578063aaf10f42146102e8578063ae5b102e146102fd578063ae60bda41461031d57600080fd5b806333482021116100f257806333482021146102155780633659cfe6146102355780634ce0f9a6146102555780634f1ef28614610268578063725f36261461027b57600080fd5b806301ffc9a71461012f57806312e5acaa14610175578063245a7bfc146101995780632b521416146101d157806331576ad5146101f3575b600080fd5b34801561013b57600080fd5b5061016061014a366004611096565b6001600160e01b031916634da8552760e11b1490565b60405190151581526020015b60405180910390f35b34801561018157600080fd5b5061018b60985481565b60405190815260200161016c565b3480156101a557600080fd5b506097546101b9906001600160a01b031681565b6040516001600160a01b03909116815260200161016c565b3480156101dd57600080fd5b503060009081526065602052604090205461018b565b3480156101ff57600080fd5b5061021361020e3660046110dc565b6103f9565b005b34801561022157600080fd5b506102136102303660046110f7565b61068d565b34801561024157600080fd5b506102136102503660046110dc565b610784565b34801561026157600080fd5b504261018b565b610213610276366004611126565b61084d565b34801561028757600080fd5b506101606102963660046110f7565b610903565b3480156102a757600080fd5b5061018b6102b63660046110dc565b60656020526000908152604090205481565b3480156102d457600080fd5b5061018b6102e33660046110f7565b61091e565b3480156102f457600080fd5b506101b9610af8565b34801561030957600080fd5b506102136103183660046111e8565b610b07565b34801561032957600080fd5b5061018b600160fe1b81565b34801561034157600080fd5b5061018b600160ff1b81565b34801561035957600080fd5b506101606103683660046111e8565b610bba565b34801561037957600080fd5b506102136103883660046110f7565b610bdf565b34801561039957600080fd5b506103a46201000081565b60405163ffffffff909116815260200161016c565b3480156103c557600080fd5b5061018b6103d4366004611212565b610be9565b3480156103e557600080fd5b506101606103f43660046110f7565b610c14565b600054610100900460ff166104145760005460ff1615610418565b303b155b61043d5760405162461bcd60e51b815260040161043490611245565b60405180910390fd5b600054610100900460ff1615801561045f576000805461ffff19166101011790555b6001600160a01b0382166104b55760405162461bcd60e51b815260206004820152601d60248201527f61676772656761746f722061646472657373206973206e6f74207365740000006044820152606401610434565b609780546001600160a01b0319166001600160a01b0384169081179091556201a5e06098556040805163313ce56760e01b815290516000929163313ce5679160048083019260209291908290030181865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c9190611293565b90506000806000806000609760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd91906112cd565b9450945094509450945060008660ff161180156105e357506000856001600160501b0316115b80156105ef5750600084135b80156105fb5750600083115b80156106075750600082115b801561061c57506000816001600160501b0316115b6106685760405162461bcd60e51b815260206004820152601e60248201527f756e65787065637465642061676772656761746f7220726573706f6e736500006044820152606401610434565b61067133610c20565b5050505050508015610689576000805461ff00191690555b5050565b61069962010000610c14565b6106b55760405162461bcd60e51b81526004016104349061131d565b610e1081116106fa5760405162461bcd60e51b81526020600482015260116024820152707468726573686f6c6420746f6f206c6f7760781b6044820152606401610434565b62093a8081106107415760405162461bcd60e51b81526020600482015260126024820152710e8d0e4cae6d0ded8c840e8dede40d0d2ced60731b6044820152606401610434565b609854604080519182526020820183905233917fdb2071e8c3304bdd7d56b3e58c5096520380c1ece076cc01f07eea15d4febc83910160405180910390a2609855565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107cd5760405162461bcd60e51b815260040161043490611344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107ff610ceb565b6001600160a01b0316146108255760405162461bcd60e51b815260040161043490611390565b61082e81610d19565b6040805160008082526020820190925261084a91839190610d42565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108965760405162461bcd60e51b815260040161043490611344565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108c8610ceb565b6001600160a01b0316146108ee5760405162461bcd60e51b815260040161043490611390565b6108f782610d19565b61068982826001610d42565b30600090815260656020526040812054821682145b92915050565b600080600080600080609760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e91906112cd565b94509450945094509450806001600160501b0316856001600160501b03161480156109c95750818311155b80156109d55750428211155b610a125760405162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b21030b739bbb2b960911b6044820152606401610434565b609854610a1f90426113f2565b8211610a615760405162461bcd60e51b8152602060048201526011602482015270185b9cddd95c881a5cc81d1bdbc81bdb19607a1b6044820152606401610434565b6097546040805163313ce56760e01b8152905186926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190611293565b610ad990600a6114ed565b610ae390896114fc565b610aed919061151b565b979650505050505050565b6000610b02610ceb565b905090565b610b14600160ff1b610c14565b610b305760405162461bcd60e51b81526004016104349061131d565b6001600160a01b038216600090815260656020526040902054610b5590339083610be9565b6001600160a01b0383166000818152606560205260409081902083905551909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f91610bae91869190918252602082015260400190565b60405180910390a35050565b6001600160a01b038216600090815260656020526040812054821682145b9392505050565b61084a3082610b07565b6001600160a01b03929092166000908152606560205260409020546000198084188216189216171690565b60006109183383610bba565b600054610100900460ff16610c3b5760005460ff1615610c3f565b303b155b610c5b5760405162461bcd60e51b815260040161043490611245565b600054610100900460ff16158015610c7d576000805461ffff19166101011790555b6001600160a01b0382166000818152606560209081526040918290206000199081905582518181529182015233917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a38015610689576000805461ff00191690555050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b610d26600160fe1b610c14565b61084a5760405162461bcd60e51b81526004016104349061131d565b6000610d4c610ceb565b9050610d5784610e8d565b600083511180610d645750815b15610d7557610d738484610f32565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610e8657805460ff191660011781556040516001600160a01b0383166024820152610df490869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610f32565b50805460ff19168155610e05610ceb565b6001600160a01b0316826001600160a01b031614610e7d5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610434565b610e868561101d565b5050505050565b803b610ef15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610434565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b610f915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610434565b600080846001600160a01b031684604051610fac919061156d565b600060405180830381855af49150503d8060008114610fe7576040519150601f19603f3d011682016040523d82523d6000602084013e610fec565b606091505b509150915061101482826040518060600160405280602781526020016115bd6027913961105d565b95945050505050565b61102681610e8d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060831561106c575081610bd8565b82511561107c5782518084602001fd5b8160405162461bcd60e51b81526004016104349190611589565b6000602082840312156110a857600080fd5b81356001600160e01b031981168114610bd857600080fd5b80356001600160a01b03811681146110d757600080fd5b919050565b6000602082840312156110ee57600080fd5b610bd8826110c0565b60006020828403121561110957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561113957600080fd5b611142836110c0565b9150602083013567ffffffffffffffff8082111561115f57600080fd5b818501915085601f83011261117357600080fd5b81358181111561118557611185611110565b604051601f8201601f19908116603f011681019083821181831017156111ad576111ad611110565b816040528281528860208487010111156111c657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156111fb57600080fd5b611204836110c0565b946020939093013593505050565b60008060006060848603121561122757600080fd5b611230846110c0565b95602085013595506040909401359392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156112a557600080fd5b815160ff81168114610bd857600080fd5b80516001600160501b03811681146110d757600080fd5b600080600080600060a086880312156112e557600080fd5b6112ee866112b6565b9450602086015193506040860151925060608601519150611311608087016112b6565b90509295509295909350565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611404576114046113dc565b500390565b600181815b8085111561144457816000190482111561142a5761142a6113dc565b8085161561143757918102915b93841c939080029061140e565b509250929050565b60008261145b57506001610918565b8161146857506000610918565b816001811461147e5760028114611488576114a4565b6001915050610918565b60ff841115611499576114996113dc565b50506001821b610918565b5060208310610133831016604e8410600b84101617156114c7575081810a610918565b6114d18383611409565b80600019048211156114e5576114e56113dc565b029392505050565b6000610bd860ff84168361144c565b6000816000190483118215151615611516576115166113dc565b500290565b60008261153857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611558578181015183820152602001611540565b83811115611567576000848401525b50505050565b6000825161157f81846020870161153d565b9190910192915050565b60208152600082518060208401526115a881604085016020870161153d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200ff148c3fe00800044693bb4936e8103e4209869fade6aa212b35815c0e5178864736f6c634300080b0033",
  "devdoc": {
    "author": "Basil Gorin",
    "events": {
      "OldAnswerThresholdUpdated(address,uint256,uint256)": {
        "details": "Fired in setOldAnswerThreshold()",
        "params": {
          "_by": "an address which executed update",
          "_newVal": "new oldAnswerThreshold value",
          "_oldVal": "old oldAnswerThreshold value"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "ethToIlv(uint256)": {
        "details": "Implementation must guarantee not to return zero, absurdly small      or big values, it must guarantee the price is up to date with some      reasonable update interval threshold",
        "params": {
          "ethOut": "amount of ETH sale contract is expecting to get"
        },
        "returns": {
          "ilvIn": "amount of sILV sale contract should accept instead"
        }
      },
      "evaluateBy(address,uint256,uint256)": {
        "details": "Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011",
        "params": {
          "desired": "desired set of permissions operator would like to set",
          "operator": "address of the contract operator which is about to set the permissions",
          "target": "input set of permissions to operator is going to modify"
        },
        "returns": {
          "_0": "resulting set of permissions given operator will set"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "getImplementation()": {
        "returns": {
          "_0": "the current implementation address"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "now256()": {
        "details": "Testing time-dependent functionality may be difficult;      we override time in the helper test smart contract (mock)",
        "returns": {
          "_0": "`block.timestamp` in mainnet, custom values in testnets (if overridden)"
        }
      },
      "postConstruct(address)": {
        "details": "\"Constructor replacement\" for upgradeable, must be execute immediately after deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers",
        "params": {
          "_aggregator": "Chainlink ILV/ETH price feed aggregator address"
        }
      },
      "setOldAnswerThreshold(uint256)": {
        "params": {
          "_oldAnswerThreshold": "`oldAnswerThreshold` value to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for or zero      to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "ROLE_PRICE_ORACLE_MANAGER": {
        "details": "Role ROLE_PRICE_ORACLE_MANAGER allows updating the `oldAnswerThreshold` value      (executing `setOldAnswerThreshold` function)"
      }
    },
    "title": "Chainlink Price Feed Aggregator based Land Sale Price Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_PRICE_ORACLE_MANAGER()": {
        "notice": "Price Oracle manager is responsible for updating `oldAnswerThreshold` value,      and other price oracle configuration values in the future"
      },
      "ROLE_UPGRADE_MANAGER()": {
        "notice": "Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable"
      },
      "aggregator()": {
        "notice": "Chainlink ILV/ETH price feed aggregator maintains ILV/ETH price feed"
      },
      "ethToIlv(uint256)": {
        "notice": "Powers the ETH/ILV Land token price conversion, used when      selling the land for sILV to determine how much sILV to accept      instead of the nominated ETH priceNote that sILV price is considered to be equal to ILV price"
      },
      "evaluateBy(address,uint256,uint256)": {
        "notice": "Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "getImplementation()": {
        "notice": "Returns an address of the implementation smart contract,      see ERC1967Upgrade._getImplementation()"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "oldAnswerThreshold()": {
        "notice": "When communicating with Chainlink ILV/ETH price feed, we verify how old      the IV/ETH price is, and if it is older than `oldAnswerThreshold`, the answer      is treated as old and is not used: `ethToIlv` conversion function throws in this case"
      },
      "setOldAnswerThreshold(uint256)": {
        "notice": "Restricted access function to update `oldAnswerThreshold` value, used       in `ethToIlv` conversion function to determine if Chainlink ILV/ETH price feed       returns the value fresh enough to be usedNote: `ethToIlv` conversion function throws if Chainlink ILV/ETH price feed      answer is older then `oldAnswerThreshold` valueChainlink is expected to update ILV/ETH price at least one per day (24 hours)      therefore `oldAnswerThreshold` should be kept bigger than 24 hours"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "userRoles(address)": {
        "notice": "Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      }
    },
    "notice": "LandSalePriceOracle implementation based on ILV/ETH Chainlink price feeds,      see https://docs.chain.link/docs/ethereum-addresses/      see https://docs.chain.link/docs/using-chainlink-reference-contracts/",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 460,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 463,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 442,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 637,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14399,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "userRoles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14404,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11770,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "aggregator",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 11773,
        "contract": "contracts/protocol/LandSalePriceOracleV1.sol:LandSalePriceOracleV1",
        "label": "oldAnswerThreshold",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}